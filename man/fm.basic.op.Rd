% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/FlashR.R
\name{fm.basic.op}
\alias{fm.agg}
\alias{fm.agg.lazy}
\alias{fm.agg.mat}
\alias{fm.agg.mat.lazy}
\alias{fm.basic.op}
\alias{fm.get.basic.op}
\alias{fm.get.basic.uop}
\alias{fm.init.basic.op}
\title{The basic operators supported by FlashMatrix.}
\usage{
fm.get.basic.op(name)

fm.get.basic.uop(name)

fm.init.basic.op()

fm.agg(fm, op)

fm.agg.lazy(fm, op)

fm.agg.mat(fm, margin, op)

fm.agg.mat.lazy(fm, margin, op)
}
\arguments{
\item{name}{the name of the basic operator.}

\item{fm}{a FlashMatrix object}

\item{op}{the reference or the name of a predefined basic operator or
the reference to an aggregation operator returned by `fm.create.agg.op'.}

\item{margin}{the subscript which the function will be applied over.}
}
\value{
a reference to the specified basic operator.

`fm.agg' returns a scalar, `fm.agg.mat' returns a FlashMatrix vector,
`fm.agg.lazy' and `fm.agg.mat.lazy' return a FlashMatrix sink matrix.
}
\description{
The basic operators are mainly used by the FlashMatrix functions that
accept operators as arguments. Such a function includes `fm.mapply',
`fm.inner.prod', etc.

This function accepts a basic operator and perform aggregation on
the FlashMatrix object with the basic operator.
}
\details{
`fm.get.basic.op' gets the predefined basic binary operator specified by a user.
The supported basic binary operators are:
\itemize{
\item{"add" or "+"}{compute addition.}
\item{"sub" or "-"}{compute subtraction;}
\item{"mul" or "*"}{compute multiplication;}
\item{"div" or "/"}{compute division;}
\item{"min" and "max"}{compute minimum and maximum, respectively;}
\item{"pow"}{compute exponential;}
\item{"eq" or "=="}{compute equality;}
\item{"gt" or ">"}{compute greater than;}
\item{"ge" or ">="}{compute greater than or equal to;}
\item{"lt" or "<"}{compute less than;}
\item{"le" or "<="}{compute less than or equal to;}
}

`fm.get.basic.uop' gets the predefined basic unary operator specified by a user.
The supported basic unary operators are:
\itemize{
\item{"neg"}{compute negate;}
\item{"sqrt"}{compute square root;}
\item{"abs"}{compute absolute value;}
\item{"not"}{compute logical NOT;}
\item{"ceil" and "floor"}{compute a ceiling and a floor, respectively;}
\item{"log", "log2" and "log10"}{compute log with different bases;}
\item{"round"}{round a number;}
\item{"as.int" and "as.numeric"}{cast a number to an integer and a numeric
value, respectively.}
}

`fm.init.basic.op' initializes the following basic operators.
\itemize{
\item{`fm.bo.add'}{the predifined basic binary operator for addition.}
\item{`fm.bo.sub'}{the predifined basic binary operator for subtraction.}
\item{`fm.bo.mul'}{the predifined basic binary operator for multiplication.}
\item{`fm.bo.div'}{the predifined basic binary operator for division.}
\item{`fm.bo.min'}{the predifined basic binary operator for computing minimum.}
\item{`fm.bo.max'}{the predifined basic binary operator for computing maximum.}
\item{`fm.bo.pow'}{the predifined basic binary operator for computing exponential.}
\item{`fm.bo.eq', `fm.bo.neq', `fm.bo.gt', `fm.bo.ge', `fm.bo.lt' and `fm.bo.le'}
{the predefined basic logical operators to compare two elements: ==, >, >=, <, <=.}
\item{`fm.buo.neg'}{the predefined basic unary operator for negate.}
\item{`fm.buo.sqrt'}{the predefined basic unary operator for square root.}
\item{`fm.buo.abs'}{the predefined basic unary operator for absolute value.}
\item{`fm.buo.not'}{the predefined logical NOT operator.}
\item{`fm.buo.ceil'}{the predefined basic unary operator of computing a ceiling
of a number.}
\item{`fm.buo.floor'}{the predefined basic unary operator of computing a floor
of a number.}
\item{`fm.buo.log', `fm.buo.log2' and `fm.buo.log10'}{the predefined basic unary
operators of computing log with different bases.}
\item{`fm.buo.round'}{the predefined basic unary operator of rounding a value.}
\item{`fm.buo.as.int'}{the predefined basic unary operator of casting a numeric
value to an integer.}
\item{`fm.buo.as.numeric'}{the predefined basic unary operator of casting
an integer to a numeric value.}
}

`fm.agg' aggregates over the entire object.

`fm.agg.lazy' aggregates over the entire object, but it performs aggregation
lazily.

`fm.agg.mat' aggregates on the rows or columns of a matrix. It performs
aggregation on the shorter dimension lazily, but on the longer dimension
immediately.

`fm.agg.mat.lazy' aggregates on the rows or columns of a matrix and performs
aggregation lazily regardless the dimension.
}
\author{
Da Zheng <dzheng5@jhu.edu>
}

