zhengda@awesomer:~/FlashGraph/matrix$ library(FlashR)
bash: syntax error near unexpected token `FlashR'
zhengda@awesomer:~/FlashGraph/matrix$ library(MASS)
bash: syntax error near unexpected token `MASS'
zhengda@awesomer:~/FlashGraph/matrix$ R

R version 3.2.4 Revised (2016-03-16 r70336) -- "Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(FlashR)
Loading required package: igraph

Attaching package: â€˜igraphâ€™

The following objects are masked from â€˜package:statsâ€™:

    decompose, spectrum

The following object is masked from â€˜package:baseâ€™:

    union

Loading required package: Rcpp
conf file FlashR.conf doesn't exist.
init SAFS: RAID config file doesn't exist
Run FlashR in standalone mode

Attaching package: â€˜FlashRâ€™

The following objects are masked from â€˜package:baseâ€™:

    pmax, pmin

> library(MASS)
> source("/mnt/nfs/zhengda/FlashGraph/Rpkg/R/LOL.R")[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1Pzhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[Ch/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[Co/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[Cm/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[Ce/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
> source("/home/zhengda/FlashGraph/Rpkg/R/LOL.R")[1P.R")[1P.R")[1P.R")S.R")V.R")D.R")
> fg.set.conf("/mnt/nfs/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")
Run FlashR
can't register rank apply operator
can't register sort apply operator
> df <- read.csv("/mnt/nfs/zhengda/data/poldrack/trackingdate.txt", header=TRUE)
> labels <- rep.int(-1, length(df$subcode))
> num <- 0
> for (idx in 1:length(df$subcode)) {
+     if (df$day_of_week[idx] == 2 || df$day_of_week[idx] == 4) {
+         num <- num + 1
+         labels[num] <- (df$day_of_week[idx] - 2) / 2
+     }
+ }
> 
> ############## Get data from Linux filesystem #########################
> files <- list.files("/mnt/nfs/zhengda/data/poldrack/binaries")
> vs <- list()
> data <- list()
> num <- 0
> for (idx in 1:length(df$subcode)) {
+     if (df$day_of_week[idx] != 2 && df$day_of_week[idx] != 4)
+         next
+     id <- as.character(df$subcode[idx])
+     path <- paste("/mnt/nfs/zhengda/data/poldrack/binaries/",
+         id, ".dat", sep="")
+     v <- fm.load.dense.matrix.bin(path, TRUE, 4389990049, 1, FALSE, "F", id)
+     if (!is.null(v)) {
+         num <- num + 1
+         vs <- c(vs, v)
+         labels[num] <- (df$day_of_week[idx] - 2) / 2
+     }
+     if (length(vs) == 32) {
+         mat <- fm.cbind.list(vs)
+         mat <- fm.conv.store(mat, FALSE, paste("russ-", length(data), sep=""))
+         data <- c(data, mat)
+         vs <- list()
+         gc()
+     }
+ }
> if (length(vs) > 0) {
+     mat <- fm.cbind.list(vs)
+     mat <- fm.conv.store(mat, FALSE, paste("russ-", length(data), sep=""))
+     data <- c(data, mat)
+     vs <- list()
+     gc()
+ }
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 386241 20.7     750400 40.1   564656 30.2
Vcells 583199  4.5    1308461 10.0   786315  6.0
> data <- fm.cbind.list(data)
> embed.classifier <- function(data, labels, proj=c("LOL", "LAL", "QOQ", "PCA"), red.p=1)
+ {
+ if (proj == "LOL")
+ proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,
+ type="svd")
+ else if (proj == "LAL")
+ proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,
+ type="rand_sparse")
+ else if (proj == "QOQ")
+ proj <- QOQ(data, fm.conv.R2FM(as.integer(labels)), red.p)
+ else if (proj == "PCA") {
+ mu <- rowMeans(data)
+ center.mat <- sweep(data, 1, mu, "-")
+ res <- fm.svd(t(center.mat), red.p, red.p)
+ proj <- res$v
+ }
+ }
> 
> train.classifier <- function(proj.res, labels, method="lda")
+ {
+ if (method == "lda")
+ lda(as.matrix(fm.conv.FM2R(proj.res)), as.factor(labels))
+ else if (method == "qda")
+ qda(as.matrix(fm.conv.FM2R(proj.res)), as.factor(labels))
+ else
+ NULL
+ }
> 
> predict.classifier <- function(object, newdata)
+ {
+ predict(object=object, newdata=as.matrix(fm.conv.FM2R(newdata)))
+ }
> 
> rand.split.test <- function(data, labels, count, train.percent, red.ps)
+ {
+ train.size <- as.integer(ncol(data) * train.percent)
+ for (run in 1:count) {
+ idxs <- 1:ncol(data)
+ train.idxs <- sort(sample(idxs, train.size))
+ test.idxs <- which(is.na(pmatch(idxs, train.idxs)))
+ train <- data[,train.idxs]
+ test <- data[,test.idxs]
+ train.labels <- labels[train.idxs]
+ truth <- labels[test.idxs]+1
+ num.train.pos <- sum(train.labels)
+ num.train.neg <- length(train.labels) - num.train.pos
+ print("truth:")
+ print(truth)
+ 
+ proj <- embed.classifier(train, train.labels, proj="LOL", max(red.ps))
+ train.proj.res <- t(train) %*% proj
+ test.proj.res <- t(test) %*% proj
+ for (red.p in red.ps) {
+ print("\n\n")
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="lda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("LOL+LDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("LOL-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ 
+ if (num.train.neg > red.p && num.train.pos > red.p) {
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="qda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("LOL+QDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("LOL-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ }
+ res <- NULL
+ gc()
+ }
+ proj <- NULL
+ gc()
+ 
+ proj <- embed.classifier(train, train.labels, proj="PCA", max(red.ps))
+ train.proj.res <- t(train) %*% proj
+ test.proj.res <- t(test) %*% proj
+ for (red.p in red.ps) {
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="lda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("PCA+LDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("PCA-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ 
+ if (num.train.neg > red.p && num.train.pos > red.p) {
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="qda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("PCA+QDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("PCA-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ }
+ res <- NULL
+ gc()
+ }
+ proj <- NULL
+ gc()
+ }
+ }
> rand.split.test()d)a)t)a),) )l)a)b)e)l)s),) )[C[C[C[Kdim(data)
[1] 4389990049         71
> length(labels)
[1] 84
> labels < [K- labels{[K[]1][C[C[C[Klabels.copy <- labels
> labels <- labels[]1]:]7]1]
> length(labels)
[1] 71
> rands[K.split.test()d)a)t)a),) )l)a)b)e)l)s),) )1)0),) )0).)8),) )c)()[C)1)),)) ))1))0)),)) ))[1P))[1P))[1P))[1P))5)),)) ))1))0)),)) ))5))0))
[1] "truth:"
 [1] 2 2 1 1 1 1 2 1 1 1 2 2 1 2 2
#labels: 2 , #dim:  50 
can't allocate 71703171072 bytes for /mnt/ssd8//matj3NvKyxf/0, error: No space left on device
R: /home/zhengda/FlashGraph/matrix/EM_object.cpp:51: static fm::detail::EM_object::file_holder::ptr fm::detail::EM_object::file_holder::create_temp(const string&, size_t, safs::safs_file_group::ptr): Assertion `ret' failed.
Aborted (core dumped)
zhengda@awesomer:~/FlashGraph/matrix$ [Kzhengda@awesomer:~/FlashGraph/matrix$ R

R version 3.2.4 Revised (2016-03-16 r70336) -- "Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(FlashR)
Loading required package: igraph

Attaching package: â€˜igraphâ€™

The following objects are masked from â€˜package:statsâ€™:

    decompose, spectrum

The following object is masked from â€˜package:baseâ€™:

    union

Loading required package: Rcpp
conf file FlashR.conf doesn't exist.
init SAFS: RAID config file doesn't exist
Run FlashR in standalone mode

Attaching package: â€˜FlashRâ€™

The following objects are masked from â€˜package:baseâ€™:

    pmax, pmin

> library(MASS)
> source("/mnt/nfs/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[1Pnt/nfs/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[1Pt/nfs/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[1P/nfs/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[1Pnfs/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[1Pfs/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[1Ps/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[Ch/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[Co/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[Cm/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[Ce/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
> source("/home/zhengda/FlashGraph/Rpkg/R/LOL.R")[1P.R")[1P.R")[1P.R")S.R")V.R")D.R")
> fg.set.conf("/mnt/nfs/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")
^[[B^[[B^[[B^[[B^[[BRun FlashR
can't register rank apply operator
can't register sort apply operator
> df <- read.csv("/mnt/nfs/zhengda/data/poldrack/trackingdate.txt", header=TRUE)
> labels <- rep.int(-1, length(df$subcode))
> num <- 0
> for (idx in 1:length(df$subcode)) {
+     if (df$day_of_week[idx] == 2 || df$day_of_week[idx] == 4) {
+         num <- num + 1
+         labels[num] <- (df$day_of_week[idx] - 2) / 2
+     }
+ }
> labels
 [1]  1  0  1  0  1  0  1  0  0  0  1  1  1  0  1  0  1  0  1  0  0  1  0  1  0
[26]  0  0  1  0  1  0  1  0  0  1  0  0  0  0  1  0  1  0  1  0  1  0  0  1  0
[51]  1  0  1  0  0  1  0  1  0  1  0  0  1  0  1  0  1  0  1  1  0 -1 -1 -1 -1
[76] -1 -1 -1 -1 -1 -1 -1 -1 -1
> length(;[Klabels)
[1] 84
> mats <- list()
> mats[[1]] <- fm.get.dense.matrix("russ-0")
> mats[[2]] <- fm.get.dense.matrix("russ-1")
> mats[[3]] <- fm.get.dense.matrix("russ-2")
> data <- fm.cbind.list(mats)
> data
An object of class "fm"
Slot "pointer":
<pointer: 0x3aa5810>

Slot "name":
[1] ""

Slot "nrow":
[1] 4389990049

Slot "ncol":
[1] 71

Slot "type":
[1] "dense"

Slot "ele_type":
[1] "double"

> labels <- labels[]1]:]7]1]
> length(labels)
[1] 71
> labels
 [1] 1 0 1 0 1 0 1 0 0 0 1 1 1 0 1 0 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0 1 0 0 1 0 0 0
[39] 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 1 0
> embed.classifier <- function(data, labels, proj=c("LOL", "LAL", "QOQ", "PCA"), red.p=1)
+ {
+ if (proj == "LOL")
+ proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â 
Error: unexpected input in:
"if (proj == "LOL")
proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â"
> type="svd")
Error: unexpected ')' in "type="svd")"
> else if (proj == "LAL")
Error: unexpected 'else' in "else"
> proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â 
Error: unexpected input in "proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â"
> type="rand_sparse")
Error: unexpected ')' in "type="rand_sparse")"
> else if (proj == "QOQ")
Error: unexpected 'else' in "else"
> proj <- QOQ(data, fm.conv.R2FM(as.integer(labels)), red.p)
  rlabels Freq
1       0   40
2       1   31
Error in QOQ(data, fm.conv.R2FM(as.integer(labels)), red.p) : 
  object 'red.p' not found
> else if (proj == "PCA") {
Error: unexpected 'else' in "else"
> mu <- rowMeans(data)
> center.mat <- sweep(data, 1, mu, "-")
> res <- fm.svd(t(center.mat), red.p, red.p)
Error in fm.svd(t(center.mat), red.p, red.p) : object 'red.p' not found
> proj <- res$v
Error: object 'res' not found
> }
Error: unexpected '}' in "}"
> }
Error: unexpected '}' in "}"
> 
> 
> train.classifier <- function(proj.res, labels, method="lda")
+ {
+ if (method == "lda")
+ lda(as.matrix(fm.conv.FM2R(proj.res)), as.factor(labels))
+ else if (method == "qda")
+ qda(as.matrix(fm.conv.FM2R(proj.res)), as.factor(labels))
+ else
+ NULL
+ }
> 
> predict.classifier <- function(object, newdata)
+ {
+ predict(object=object, newdata=as.matrix(fm.conv.FM2R(newdata)))
+ }
> 
> rand.split.test <- function(data, labels, count, train.percent, red.ps)
+ {
+ train.size <- as.integer(ncol(data) * train.percent)
+ for (run in 1:count) {
+ idxs <- 1:ncol(data)
+ train.idxs <- sort(sample(idxs, train.size))
+ test.idxs <- which(is.na(pmatch(idxs, train.idxs)))
+ train <- data[,train.idxs]
+ test <- data[,test.idxs]
+ train.labels <- labels[train.idxs]
+ truth <- labels[test.idxs]+1
+ num.train.pos <- sum(train.labels)
+ num.train.neg <- length(train.labels) - num.train.pos
+ print("truth:")
+ print(truth)
+ 
+ proj <- embed.classifier(train, train.labels, proj="LOL", max(red.ps))
+ train.proj.res <- t(train) %*% proj
+ test.proj.res <- t(test) %*% proj
+ for (red.p in red.ps) {
+ print("\n\n")
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="lda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("LOL+LDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("LOL-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ 
+ if (num.train.neg > red.p && num.train.pos > red.p) {
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="qda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("LOL+QDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("LOL-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ }
+ res <- NULL
+ gc()
+ }
+ proj <- NULL
+ gc()
+ 
+ proj <- embed.classifier(train, train.labels, proj="PCA", max(red.ps))
+ train.proj.res <- t(train) %*% proj
+ test.proj.res <- t(test) %*% proj
+ for (red.p in red.ps) {
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="lda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("PCA+LDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("PCA-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ 
+ 
+ if (num.train.neg > red.p && num.train.pos > red.p) {
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="qda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("PCA+QDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("PCA-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ }
+ res <- NULL
+ gc()
+ }
+ proj <- NULL
+ gc()
+ }
+ }
> rand.split.test()d)a)t)a),) )l)a)b)e)l)s),) )
data=           labels=         count=          train.percent=  red.ps=         
> rand.split.test(data, labels, )1)0),) )0).)9)[1P)8),) )c)()[C)1)):))[1P)),)) ))5)),)) ))1))0)),)) ))5))0))
[1] "truth:"
 [1] 1 2 1 1 1 1 2 2 1 1 2 2 2 2 2
Error: could not find function "embed.classifier"
> bed.classifier <- function(data, labels, proj=c("LOL", "LAL", "QOQ", "PCA"), red.p=1)
+ {
+ if (proj == "LOL")
+ proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â 
Error: unexpected input in:
"if (proj == "LOL")
proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â"
> type="svd")
Error: unexpected ')' in "type="svd")"
> else if (proj == "LAL")
Error: unexpected 'else' in "else"
> proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â 
Error: unexpected input in "proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â"
> type="rand_sparse")
Error: unexpected ')' in "type="rand_sparse")"
> else if (proj == "QOQ")
Error: unexpected 'else' in "else"
> proj <- QOQ(data, fm.conv.R2FM(as.integer(labels)), red.p)
  rlabels Freq
1       0   40
2       1   31
Error in QOQ(data, fm.conv.R2FM(as.integer(labels)), red.p) : 
  object 'red.p' not found
> else if (proj == "PCA") {
Error: unexpected 'else' in "else"
> mu <- rowMeans(data)
> center.mat <- sweep(data, 1, mu, "-")
> res <- fm.svd(t(center.mat), red.p, red.p)
Error in fm.svd(t(center.mat), red.p, red.p) : object 'red.p' not found
> proj <- res$v
Error: object 'res' not found
> }
Error: unexpected '}' in "}"
> }
Error: unexpected '}' in "}"
> 
> 
> embed.classifier <- function(data, labels, proj=c("LOL", "LAL", "QOQ", "PCA"), red.p=1)
+ {
+ if (proj == "LOL")
+ proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â 
Error: unexpected input in:
"if (proj == "LOL")
proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â"
> type="svd")
Error: unexpected ')' in "type="svd")"
> else if (proj == "LAL")
Error: unexpected 'else' in "else"
> proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â 
Error: unexpected input in "proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,Â"
> type="rand_sparse")
Error: unexpected ')' in "type="rand_sparse")"
> else if (proj == "QOQ")
Error: unexpected 'else' in "else"
> proj <- QOQ(data, fm.conv.R2FM(as.integer(labels)), red.p)
  rlabels Freq
1       0   40
2       1   31
Error in QOQ(data, fm.conv.R2FM(as.integer(labels)), red.p) : 
  object 'red.p' not found
> else if (proj == "PCA") {
Error: unexpected 'else' in "else"
> mu <- rowMeans(data)
> center.mat <- sweep(data, 1, mu, "-")
> res <- fm.svd(t(center.mat), red.p, red.p)
Error in fm.svd(t(center.mat), red.p, red.p) : object 'red.p' not found
> proj <- res$v
Error: object 'res' not found
> }
Error: unexpected '}' in "}"
> }
Error: unexpected '}' in "}"
> embed.classifier <- function(data, labels, proj=c("LOL", "LAL", "QOQ", "PCA"), red.p=1)
+ {
+ if (proj == "LOL")
+ proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p, type="svd")
+ else if (proj == "LAL")
+ proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p, type="rand_sparse")
+ else if (proj == "QOQ")
+ proj <- QOQ(data, fm.conv.R2FM(as.integer(labels)), red.p)
+ else if (proj == "PCA") {
+ mu <- rowMeans(data)
+ center.mat <- sweep(data, 1, mu, "-")
+ res <- fm.svd(t(center.mat), red.p, red.p)
+ proj <- res$v
+ }
+ }
> rand.split.test()d)a)t)a),) )
data=           labels=         count=          train.percent=  red.ps=         
> rand.split.test(data, )l)a)b)e)l)s),) )1)0),) )0).)9)[1P)8),) )c)()[C)1)) ))[1P)),)) ))5)),)) ))1))0)),)) ))5))0))
[1] "truth:"
 [1] 1 1 2 2 1 1 2 1 1 2 1 1 1 1 1
#labels: 2 , #dim:  50 
^C^C^CTerminated
zhengda@awesomer:~/FlashGraph/matrix$ R

R version 3.2.4 Revised (2016-03-16 r70336) -- "Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(FlashR)
Loading required package: igraph

Attaching package: â€˜igraphâ€™

The following objects are masked from â€˜package:statsâ€™:

    decompose, spectrum

The following object is masked from â€˜package:baseâ€™:

    union

Loading required package: Rcpp
conf file FlashR.conf doesn't exist.
init SAFS: RAID config file doesn't exist
Run FlashR in standalone mode

Attaching package: â€˜FlashRâ€™

The following objects are masked from â€˜package:baseâ€™:

    pmax, pmin

> library(MASS)
> source("/mnt/nfs/zhengda/FlashGraph/Rpkg/R/LOL.R")
> source("/mnt/nfs/zhengda/FlashGraph/Rpkg/R/LOL.R")[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1Pzhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[Ch/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[Co/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[Cm/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[Ce/zhengda/FlashGraph/Rpkg/R/LOL.R")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
> source("/home/zhengda/FlashGraph/Rpkg/R/LOL.R")[1P.R")[1P.R")[1P.R")S.R")V.R")D.R")
> fg.set.conf("/mnt/nfs/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")[1P/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1Pzhengda/FlashGraph/matrix/conf/run_test-IM.txt")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ch/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Co/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cm/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ce/zhengda/FlashGraph/matrix/conf/run_test-IM.txt")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1PM.txt")EM.txt")
Run FlashR
can't register rank apply operator
can't register sort apply operator
> df <- read.csv("/mnt/nfs/zhengda/data/poldrack/trackingdate.txt", header=TRUE)
> labels <- rep.int(-1, length(df$subcode))
> num <- 0
> for (idx in 1:length(df$subcode)) {
+     if (df$day_of_week[idx] == 2 || df$day_of_week[idx] == 4) {
+         num <- num + 1
+         labels[num] <- (df$day_of_week[idx] - 2) / 2
+     }
+ }
> mats <- list()
> mats[[1]] <- fm.get.dense.matrix("russ-0")
> mats[[2]] <- fm.get.dense.matrix("russ-1")
> mats[[3]] <- fm.get.dense.matrix("russ-2")
> data <- fm.cbind.list(mats)
> embed.classifier <- function(data, labels, proj=c("LOL", "LAL", "QOQ", "PCA"), red.p=1)
+ {
+ if (proj == "LOL")
+ proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,type="svd")
+ else if (proj == "LAL")
+ proj <- LOL(data, fm.conv.R2FM(as.integer(labels)), red.p,type="rand_sparse")
+ else if (proj == "QOQ")
+ proj <- QOQ(data, fm.conv.R2FM(as.integer(labels)), red.p)
+ else if (proj == "PCA") {
+ mu <- rowMeans(data)
+ center.mat <- sweep(data, 1, mu, "-")
+ res <- fm.svd(t(center.mat), red.p, red.p)
+ proj <- res$v
+ }
+ }
> 
> train.classifier <- function(proj.res, labels, method="lda")
+ {
+ if (method == "lda")
+ lda(as.matrix(fm.conv.FM2R(proj.res)), as.factor(labels))
+ else if (method == "qda")
+ qda(as.matrix(fm.conv.FM2R(proj.res)), as.factor(labels))
+ else
+ NULL
+ }
> 
> predict.classifier <- function(object, newdata)
+ {
+ predict(object=object, newdata=as.matrix(fm.conv.FM2R(newdata)))
+ }
> 
> rand.split.test <- function(data, labels, count, train.percent, red.ps)
+ {
+ train.size <- as.integer(ncol(data) * train.percent)
+ for (run in 1:count) {
+ idxs <- 1:ncol(data)
+ train.idxs <- sort(sample(idxs, train.size))
+ test.idxs <- which(is.na(pmatch(idxs, train.idxs)))
+ train <- data[,train.idxs]
+ test <- data[,test.idxs]
+ train.labels <- labels[train.idxs]
+ truth <- labels[test.idxs]+1
+ num.train.pos <- sum(train.labels)
+ num.train.neg <- length(train.labels) - num.train.pos
+ print("truth:")
+ print(truth)
+ 
+ proj <- embed.classifier(train, train.labels, proj="LOL", max(red.ps))
+ train.proj.res <- t(train) %*% proj
+ test.proj.res <- t(test) %*% proj
+ for (red.p in red.ps) {
+ print("\n\n")
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="lda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("LOL+LDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("LOL-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ 
+ if (num.train.neg > red.p && num.train.pos > red.p) {
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="qda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("LOL+QDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("LOL-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ }
+ res <- NULL
+ gc()
+ }
+ proj <- NULL
+ gc()
+ 
+ proj <- embed.classifier(train, train.labels, proj="PCA", max(red.ps))
+ train.proj.res <- t(train) %*% proj
+ test.proj.res <- t(test) %*% proj
+ for (red.p in red.ps) {
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="lda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("PCA+LDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("PCA-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ 
+ if (num.train.neg > red.p && num.train.pos > red.p) {
+ res <- train.classifier(train.proj.res[,1:red.p], train.labels, method="qda")
+ pred <- predict.classifier(object=res, newdata=test.proj.res[,1:red.p])
+ print("PCA+QDA predict:")
+ print(pred$class)
+ # measure the accuracy
+ out <- paste("PCA-", red.p, "dim: ",
+ sum((as.integer(pred$class) - truth) != 0)/length(pred$class), sep="")
+ print(out)
+ }
+ res <- NULL
+ gc()
+ }
+ proj <- NULL
+ gc()
+ }
+ }
> rand.split.test()d)a)t)a),) )l)a)b)e)l)s),) )
data=           labels=         count=          train.percent=  red.ps=         
> rand.split.test(data, labels, )1)0),) )0).)9)[1P)8),) )c)()[C)1)),)) ))5)),)) ))1))0)),)) ))5))0))
[1] "truth:"
 [1] 1 2 1 1 1 1 1 2 2 1 1 2 1 1 1
#labels: 2 , #dim:  50 
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 0 0 1 0 0 1 1 0 0 1 0 0 0
Levels: 0 1
[1] "LOL-1dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 1 1 0 0 1 0 0 1 1 0 0 1 0 0 0
Levels: 0 1
[1] "LOL-1dim: 0.133333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 0 0 0 0 1 1 1 1 0 1 0 0 0
Levels: 0 1
[1] "LOL-5dim: 0.2"
[1] "LOL+QDA predict:"
 [1] 1 1 0 0 1 0 1 1 1 1 0 1 0 0 0
Levels: 0 1
[1] "LOL-5dim: 0.266666666666667"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 0 0 1 0 1 1 1 1 0 1 0 0 0
Levels: 0 1
[1] "LOL-10dim: 0.266666666666667"
[1] "LOL+QDA predict:"
 [1] 1 1 0 0 1 0 1 1 1 1 0 1 0 0 0
Levels: 0 1
[1] "LOL-10dim: 0.266666666666667"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 0 0 0 0 1 1 1 1 0 1 0 0 0
Levels: 0 1
[1] "LOL-50dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 1 1 0 0 1 0 0 1 1 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-1dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 1 1 0 0 1 0 0 1 1 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-1dim: 0.133333333333333"
[1] "PCA+LDA predict:"
 [1] 1 1 0 0 1 0 0 1 1 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-5dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-5dim: 0.0666666666666667"
[1] "PCA+LDA predict:"
 [1] 1 1 0 0 1 0 0 1 1 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-10dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 1 1 0 0 0 0 0 1 0 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-10dim: 0.133333333333333"
[1] "PCA+LDA predict:"
 [1] 1 1 0 0 0 0 1 1 1 1 0 1 0 0 0
Levels: 0 1
[1] "PCA-50dim: 0.2"
[1] "truth:"
 [1] 2 1 2 1 2 2 1 2 1 1 1 1 2 1 2
#labels: 2 , #dim:  50 
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 0 1 0 1 1 0 0 0 0 0 0 1 0 0
Levels: 0 1
[1] "LOL-1dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 1 0 1 0 1 1 0 0 0 0 0 0 1 0 0
Levels: 0 1
[1] "LOL-1dim: 0.133333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 0 1 0 1 1 0 0 0 0 0 0 1 0 0
Levels: 0 1
[1] "LOL-5dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 1 0 1 0 1 1 0 0 0 0 0 0 1 0 0
Levels: 0 1
[1] "LOL-5dim: 0.133333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 0 0 0 1 1 0 0 0 0 1 0 1 0 0
Levels: 0 1
[1] "LOL-10dim: 0.266666666666667"
[1] "LOL+QDA predict:"
 [1] 1 0 1 0 1 1 0 0 0 0 1 0 1 0 0
Levels: 0 1
[1] "LOL-10dim: 0.2"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 0 1 0 1 1 0 0 0 0 0 0 1 0 0
Levels: 0 1
[1] "LOL-50dim: 0.133333333333333"
[1] "PCA+LDA predict:"
 [1] 1 0 1 0 1 1 0 1 0 0 0 0 1 0 0
Levels: 0 1
[1] "PCA-1dim: 0.0666666666666667"
[1] "PCA+QDA predict:"
 [1] 1 0 1 0 1 1 0 1 0 0 0 0 1 0 0
Levels: 0 1
[1] "PCA-1dim: 0.0666666666666667"
[1] "PCA+LDA predict:"
 [1] 1 0 1 0 1 1 0 0 0 0 0 0 1 0 0
Levels: 0 1
[1] "PCA-5dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 1 0 0 0 1 1 0 0 0 0 0 0 1 0 0
Levels: 0 1
[1] "PCA-5dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 1 0 1 0 1 1 0 0 0 0 0 0 1 0 0
Levels: 0 1
[1] "PCA-10dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 1 0 1 0 1 1 0 0 0 0 0 0 1 0 0
Levels: 0 1
[1] "PCA-10dim: 0.133333333333333"
[1] "PCA+LDA predict:"
 [1] 1 0 1 0 1 1 0 0 0 0 0 0 1 0 0
Levels: 0 1
[1] "PCA-50dim: 0.133333333333333"
[1] "truth:"
 [1] 2 1 2 2 1 2 1 1 1 1 2 1 1 2 2
#labels: 2 , #dim:  50 
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "LOL-1dim: 0.266666666666667"
[1] "LOL+QDA predict:"
 [1] 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "LOL-1dim: 0.266666666666667"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 0 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "LOL-5dim: 0.333333333333333"
[1] "LOL+QDA predict:"
 [1] 1 1 0 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "LOL-5dim: 0.333333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "LOL-10dim: 0.266666666666667"
[1] "LOL+QDA predict:"
 [1] 1 0 0 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "LOL-10dim: 0.266666666666667"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "LOL-50dim: 0.266666666666667"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "PCA-1dim: 0.266666666666667"
[1] "PCA+QDA predict:"
 [1] 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "PCA-1dim: 0.266666666666667"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "PCA-5dim: 0.266666666666667"
[1] "PCA+QDA predict:"
 [1] 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "PCA-5dim: 0.266666666666667"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "PCA-10dim: 0.266666666666667"
[1] "PCA+QDA predict:"
 [1] 0 0 1 1 1 1 0 1 0 0 1 1 0 1 1
Levels: 0 1
[1] "PCA-10dim: 0.266666666666667"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1
Levels: 0 1
[1] "PCA-50dim: 0.266666666666667"
[1] "truth:"
 [1] 1 1 1 2 1 2 1 1 2 1 2 1 1 2 1
#labels: 2 , #dim:  50 
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0
Levels: 0 1
[1] "LOL-1dim: 0.2"
[1] "LOL+QDA predict:"
 [1] 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0
Levels: 0 1
[1] "LOL-1dim: 0.2"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 0 1 1 0 1 0 0 1 0 1 0 0 0 0
Levels: 0 1
[1] "LOL-5dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 0 0 1 1 0 1 0 0 1 1 1 0 0 1 0
Levels: 0 1
[1] "LOL-5dim: 0.133333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 0 1 1 0 1 0 0 1 1 1 0 0 0 0
Levels: 0 1
[1] "LOL-10dim: 0.2"
[1] "LOL+QDA predict:"
 [1] 0 0 1 1 0 1 0 0 1 1 1 0 0 1 0
Levels: 0 1
[1] "LOL-10dim: 0.133333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 0 1 1 0 1 0 0 1 0 1 0 0 1 0
Levels: 0 1
[1] "LOL-50dim: 0.0666666666666667"
[1] "PCA+LDA predict:"
 [1] 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0
Levels: 0 1
[1] "PCA-1dim: 0.2"
[1] "PCA+QDA predict:"
 [1] 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0
Levels: 0 1
[1] "PCA-1dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 0 0 1 1 0 1 0 0 0 0 1 0 0 1 0
Levels: 0 1
[1] "PCA-5dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0
Levels: 0 1
[1] "PCA-5dim: 0.266666666666667"
[1] "PCA+LDA predict:"
 [1] 0 0 1 1 0 1 0 0 0 0 1 0 0 1 0
Levels: 0 1
[1] "PCA-10dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 0 0 1 1 0 0 0 0 0 0 1 0 0 1 0
Levels: 0 1
[1] "PCA-10dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 0 0 1 1 0 1 0 0 1 0 1 0 0 1 0
Levels: 0 1
[1] "PCA-50dim: 0.0666666666666667"
[1] "truth:"
 [1] 1 2 1 1 1 2 1 2 1 1 2 2 1 1 2
#labels: 2 , #dim:  50 
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1
Levels: 0 1
[1] "LOL-1dim: 0.2"
[1] "LOL+QDA predict:"
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1
Levels: 0 1
[1] "LOL-1dim: 0.2"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 0 0 0 0 0 0 1 0 0 1 1 0 0 1
Levels: 0 1
[1] "LOL-5dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 0 0 0 0 0 0 0 1 0 0 1 1 0 0 1
Levels: 0 1
[1] "LOL-5dim: 0.133333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 0 0 0 0 0 0 1 0 0 1 1 0 0 1
Levels: 0 1
[1] "LOL-10dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 0 1 0 0 0 0 0 1 0 0 1 1 0 0 1
Levels: 0 1
[1] "LOL-10dim: 0.0666666666666667"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 0 0 0 0 0 0 1 0 0 1 1 0 0 1
Levels: 0 1
[1] "LOL-50dim: 0.133333333333333"
[1] "PCA+LDA predict:"
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1
Levels: 0 1
[1] "PCA-1dim: 0.2"
[1] "PCA+QDA predict:"
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1
Levels: 0 1
[1] "PCA-1dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1
Levels: 0 1
[1] "PCA-5dim: 0.2"
[1] "PCA+QDA predict:"
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1
Levels: 0 1
[1] "PCA-5dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1
Levels: 0 1
[1] "PCA-10dim: 0.2"
[1] "PCA+QDA predict:"
 [1] 0 0 0 0 0 0 0 0 1 0 1 1 0 0 1
Levels: 0 1
[1] "PCA-10dim: 0.266666666666667"
[1] "PCA+LDA predict:"
 [1] 0 0 0 0 0 0 0 1 0 0 1 1 0 0 1
Levels: 0 1
[1] "PCA-50dim: 0.133333333333333"
[1] "truth:"
 [1] 2 2 2 2 1 2 1 1 1 1 1 2 1 1 1
#labels: 2 , #dim:  50 
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "LOL-1dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "LOL-1dim: 0.133333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "LOL-5dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "LOL-5dim: 0.133333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "LOL-10dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "LOL-10dim: 0.133333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "LOL-50dim: 0.133333333333333"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-1dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-1dim: 0.133333333333333"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-5dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0
Levels: 0 1
[1] "PCA-5dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-10dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-10dim: 0.133333333333333"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0
Levels: 0 1
[1] "PCA-50dim: 0.133333333333333"
[1] "truth:"
 [1] 2 1 1 2 2 1 2 1 1 2 1 1 2 1 2
#labels: 2 , #dim:  50 
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 1 1 1 0 1 0 0 0 0 0 1 0 1
Levels: 0 1
[1] "LOL-1dim: 0.2"
[1] "LOL+QDA predict:"
 [1] 1 1 1 1 1 0 1 0 0 0 0 0 1 0 1
Levels: 0 1
[1] "LOL-1dim: 0.2"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 0 1 1 1 0 1 0 0 1 0 0 1 1 1
Levels: 0 1
[1] "LOL-5dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1
Levels: 0 1
[1] "LOL-5dim: 0.2"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 0 1 1 1 0 1 0 0 1 0 0 1 1 1
Levels: 0 1
[1] "LOL-10dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 1 0 0 1 1 0 0 0 0 1 0 0 1 0 1
Levels: 0 1
[1] "LOL-10dim: 0.0666666666666667"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1
Levels: 0 1
[1] "LOL-50dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 0 1 0 0 0 0 0 1 0 1
Levels: 0 1
[1] "PCA-1dim: 0.2"
[1] "PCA+QDA predict:"
 [1] 1 1 1 1 1 0 1 0 0 0 0 0 1 0 1
Levels: 0 1
[1] "PCA-1dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 0 1 0 0 0 0 0 1 0 1
Levels: 0 1
[1] "PCA-5dim: 0.2"
[1] "PCA+QDA predict:"
 [1] 1 1 0 1 1 0 1 0 0 0 0 0 1 0 1
Levels: 0 1
[1] "PCA-5dim: 0.133333333333333"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 0 1 0 0 0 0 0 1 0 1
Levels: 0 1
[1] "PCA-10dim: 0.2"
[1] "PCA+QDA predict:"
 [1] 1 0 1 1 1 0 1 0 0 1 0 0 1 0 1
Levels: 0 1
[1] "PCA-10dim: 0.0666666666666667"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1
Levels: 0 1
[1] "PCA-50dim: 0.2"
[1] "truth:"
 [1] 1 2 2 2 2 1 2 2 1 1 1 1 1 1 1
#labels: 2 , #dim:  50 
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 1 1 1 1 1 0 1 0 1 0 0 0 1 0
Levels: 0 1
[1] "LOL-1dim: 0.266666666666667"
[1] "LOL+QDA predict:"
 [1] 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0
Levels: 0 1
[1] "LOL-1dim: 0.333333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 1 1 1 1 1 0 1 0 1 0 0 0 0 0
Levels: 0 1
[1] "LOL-5dim: 0.2"
[1] "LOL+QDA predict:"
 [1] 0 1 1 1 1 1 0 1 0 1 0 0 0 1 0
Levels: 0 1
[1] "LOL-5dim: 0.266666666666667"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 1 1 1 1 1 0 1 0 1 0 0 0 0 0
Levels: 0 1
[1] "LOL-10dim: 0.2"
[1] "LOL+QDA predict:"
 [1] 0 1 1 1 0 1 0 1 0 1 0 0 0 0 0
Levels: 0 1
[1] "LOL-10dim: 0.266666666666667"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 1 1 1 1 1 0 1 0 1 0 0 0 0 0
Levels: 0 1
[1] "LOL-50dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0
Levels: 0 1
[1] "PCA-1dim: 0.333333333333333"
[1] "PCA+QDA predict:"
 [1] 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0
Levels: 0 1
[1] "PCA-1dim: 0.333333333333333"
[1] "PCA+LDA predict:"
 [1] 0 1 1 1 1 1 0 1 0 1 0 0 0 1 0
Levels: 0 1
[1] "PCA-5dim: 0.266666666666667"
[1] "PCA+QDA predict:"
 [1] 0 1 1 1 1 1 0 1 0 1 0 0 1 1 0
Levels: 0 1
[1] "PCA-5dim: 0.333333333333333"
[1] "PCA+LDA predict:"
 [1] 0 1 1 1 1 1 0 1 0 1 0 0 0 1 0
Levels: 0 1
[1] "PCA-10dim: 0.266666666666667"
[1] "PCA+QDA predict:"
 [1] 0 1 1 1 1 1 0 1 0 1 0 0 0 1 0
Levels: 0 1
[1] "PCA-10dim: 0.266666666666667"
[1] "PCA+LDA predict:"
 [1] 0 1 1 1 1 1 0 1 0 1 0 0 0 0 0
Levels: 0 1
[1] "PCA-50dim: 0.2"
[1] "truth:"
 [1] 2 2 2 2 1 1 2 1 1 2 1 1 2 1 2
#labels: 2 , #dim:  50 
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 1 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "LOL-1dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 1 1 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "LOL-1dim: 0.133333333333333"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 0 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "LOL-5dim: 0.2"
[1] "LOL+QDA predict:"
 [1] 1 0 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "LOL-5dim: 0.2"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 0 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "LOL-10dim: 0.2"
[1] "LOL+QDA predict:"
 [1] 1 0 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "LOL-10dim: 0.2"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 0 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "LOL-50dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 1 1 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "PCA-1dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 1 1 1 1 0 0 1 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "PCA-1dim: 0.0666666666666667"
[1] "PCA+LDA predict:"
 [1] 1 0 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "PCA-5dim: 0.2"
[1] "PCA+QDA predict:"
 [1] 1 0 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "PCA-5dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 1 0 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "PCA-10dim: 0.2"
[1] "PCA+QDA predict:"
 [1] 1 0 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "PCA-10dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 1 0 1 1 0 0 0 0 0 1 0 0 0 0 1
Levels: 0 1
[1] "PCA-50dim: 0.2"
[1] "truth:"
 [1] 2 1 2 2 2 2 1 1 1 2 1 2 1 2 2
#labels: 2 , #dim:  50 
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 1 0 1 1 1 0 0 0 0 1 0 1 0 1 1
Levels: 0 1
[1] "LOL-1dim: 0.0666666666666667"
[1] "LOL+QDA predict:"
 [1] 1 0 1 1 1 0 0 0 0 1 0 1 0 1 1
Levels: 0 1
[1] "LOL-1dim: 0.0666666666666667"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 0 1 1 1 0 0 0 0 1 0 1 0 1 1
Levels: 0 1
[1] "LOL-5dim: 0.133333333333333"
[1] "LOL+QDA predict:"
 [1] 0 0 1 1 0 0 0 0 0 1 0 1 0 0 1
Levels: 0 1
[1] "LOL-5dim: 0.266666666666667"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 0 1 1 1 0 0 0 1 1 0 1 0 1 1
Levels: 0 1
[1] "LOL-10dim: 0.2"
[1] "LOL+QDA predict:"
 [1] 0 0 1 1 1 0 0 0 1 1 0 1 0 1 1
Levels: 0 1
[1] "LOL-10dim: 0.2"
[1] "\n\n"
[1] "LOL+LDA predict:"
 [1] 0 0 1 1 1 0 0 0 1 1 0 1 0 1 1
Levels: 0 1
[1] "LOL-50dim: 0.2"
[1] "PCA+LDA predict:"
 [1] 1 0 1 1 1 0 0 0 0 1 0 1 0 1 1
Levels: 0 1
[1] "PCA-1dim: 0.0666666666666667"
[1] "PCA+QDA predict:"
 [1] 1 0 1 1 1 0 0 0 0 1 0 1 0 1 1
Levels: 0 1
[1] "PCA-1dim: 0.0666666666666667"
[1] "PCA+LDA predict:"
 [1] 1 0 1 1 1 0 0 0 0 1 0 1 0 1 1
Levels: 0 1
[1] "PCA-5dim: 0.0666666666666667"
[1] "PCA+QDA predict:"
 [1] 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1
Levels: 0 1
[1] "PCA-5dim: 0.266666666666667"
[1] "PCA+LDA predict:"
 [1] 1 0 1 1 1 0 0 0 0 1 0 1 0 0 1
Levels: 0 1
[1] "PCA-10dim: 0.133333333333333"
[1] "PCA+QDA predict:"
 [1] 1 0 1 1 1 0 0 0 1 0 0 1 0 0 1
Levels: 0 1
[1] "PCA-10dim: 0.266666666666667"
[1] "PCA+LDA predict:"
 [1] 0 0 1 1 1 0 0 0 1 1 0 1 0 1 1
Levels: 0 1
[1] "PCA-50dim: 0.2"
> 